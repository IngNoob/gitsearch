// Mocks generated by Mockito 5.2.0 from annotations
// in gitsearch/test/widget_test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:gitsearch/Items/search_query.dart' as _i5;
import 'package:gitsearch/Items/search_result.dart' as _i2;
import 'package:gitsearch/Services/github_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSearchResult_0 extends _i1.Fake implements _i2.SearchResult {}

/// A class which mocks [GitHubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubService extends _i1.Mock implements _i3.GitHubService {
  MockGitHubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseURL =>
      (super.noSuchMethod(Invocation.getter(#baseURL), returnValue: '')
          as String);
  @override
  String get searchEndPoint =>
      (super.noSuchMethod(Invocation.getter(#searchEndPoint), returnValue: '')
          as String);
  @override
  Map<String, String> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  _i4.Future<_i2.SearchResult> repoSearch(_i5.SearchQuery? queryParams) =>
      (super.noSuchMethod(Invocation.method(#repoSearch, [queryParams]),
              returnValue:
                  Future<_i2.SearchResult>.value(_FakeSearchResult_0()))
          as _i4.Future<_i2.SearchResult>);
}
